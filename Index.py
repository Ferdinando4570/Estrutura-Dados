{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPq1wa8gnfpBsPqpnFNgGOF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BKx6c54lmn8q","outputId":"81dfa563-6bde-4df2-e692-5542afa5822a"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Menu do Campeonato \n","1 - Adicionar Equipe\n","2 - Adicionar Jogador\n","3 - Registrar Partida\n","4 - Mostrar Resultados\n","5 - Mostrar Info da Equipe\n","6 - Sair\n"]}],"source":["from collections import deque\n","\n","\n","class Jogador:\n","    def __init__(self, nome, posicao):\n","        self.nome = nome\n","        self.posicao = posicao\n","        self.pontos = 0\n","        self.assistencias = 0\n","        self.rebotes = 0\n","\n","    def __str__(self):\n","        return f\"{self.nome} ({self.posicao}) - Pts: {self.pontos}, Ast: {self.assistencias}, Reb: {self.rebotes}\"\n","\n","class Equipe:\n","    def __init__(self, nome):\n","        self.nome = nome\n","        self.jogadores = []\n","        self.historico = deque(maxlen=10)\n","\n","    def adicionar_jogador(self, jogador):\n","        self.jogadores.append(jogador)\n","        print(f\"Jogador {jogador.nome} adicionado à equipe {self.nome}.\")\n","\n","    def listar_jogadores(self):\n","        if not self.jogadores:\n","            print(f\"Nenhum jogador na equipe {self.nome}.\")\n","            return\n","        print(f\"Jogadores da equipe {self.nome}:\")\n","        for j in self.jogadores:\n","            print(f\" - {j}\")\n","\n","    def adicionar_partida(self, resultado):\n","        self.historico.append(resultado)\n","\n","    def mostrar_historico(self):\n","        if not self.historico:\n","            print(f\"Sem histórico para a equipe {self.nome}.\")\n","            return\n","        print(f\"Últimas partidas da equipe {self.nome}:\")\n","        for r in self.historico:\n","            print(f\" - {r}\")\n","\n","class Campeonato:\n","    def __init__(self, nome):\n","        self.nome = nome\n","        self.equipes = {}\n","        self.partidas = []\n","\n","    def adicionar_equipe(self, nome):\n","        if nome in self.equipes:\n","            print(f\"Equipe {nome} já existe.\")\n","            return\n","        self.equipes[nome] = Equipe(nome)\n","        print(f\"Equipe {nome} adicionada.\")\n","\n","    def adicionar_jogador(self, nome_equipe, nome_jogador, posicao):\n","        equipe = self.equipes.get(nome_equipe)\n","        if not equipe:\n","            print(f\"Equipe {nome_equipe} não encontrada.\")\n","            return\n","        jogador = Jogador(nome_jogador, posicao)\n","        equipe.adicionar_jogador(jogador)\n","\n","    def registrar_partida(self, eq1, eq2, pontos_eq1, pontos_eq2):\n","        e1 = self.equipes.get(eq1)\n","        e2 = self.equipes.get(eq2)\n","        if not e1 or not e2:\n","            print(\"Uma das equipes não existe.\")\n","            return\n","\n","        self.partidas.append((eq1, pontos_eq1, pontos_eq2, eq2))\n","\n","        def resultado(pontos_a, pontos_b, adversario):\n","            if pontos_a > pontos_b:\n","                return f\"Venceu {pontos_a} x {pontos_b} contra {adversario}\"\n","            elif pontos_a < pontos_b:\n","                return f\"Perdeu {pontos_a} x {pontos_b} contra {adversario}\"\n","            else:\n","                return f\"Empatou {pontos_a} x {pontos_b} contra {adversario}\"\n","\n","        e1.adicionar_partida(resultado(pontos_eq1, pontos_eq2, eq2))\n","        e2.adicionar_partida(resultado(pontos_eq2, pontos_eq1, eq1))\n","\n","        print(f\"Partida registrada: {eq1} {pontos_eq1} x {pontos_eq2} {eq2}\")\n","\n","    def mostrar_resultados(self):\n","        if not self.partidas:\n","            print(\"Nenhuma partida registrada.\")\n","            return\n","        print(\"Resultados:\")\n","        for eq1, p1, p2, eq2 in self.partidas:\n","            print(f\"{eq1} {p1} x {p2} {eq2}\")\n","\n","    def mostrar_info_equipe(self, nome_equipe):\n","        equipe = self.equipes.get(nome_equipe)\n","        if not equipe:\n","            print(\"Equipe não encontrada.\")\n","            return\n","        equipe.listar_jogadores()\n","        equipe.mostrar_historico()\n","\n","\n","def menu():\n","    campe = Campeonato(\"Campeonato de Basquete\")\n","\n","    while True:\n","        print(\"\\n Menu do Campeonato \")\n","        print(\"1 - Adicionar Equipe\")\n","        print(\"2 - Adicionar Jogador\")\n","        print(\"3 - Registrar Partida\")\n","        print(\"4 - Mostrar Resultados\")\n","        print(\"5 - Mostrar Info da Equipe\")\n","        print(\"6 - Sair\")\n","\n","        op = input(\"Opção: \").strip()\n","\n","        if op == '1':\n","            nome = input(\"Nome da equipe: \").strip()\n","            campe.adicionar_equipe(nome)\n","\n","        elif op == '2':\n","            equipe = input(\"Equipe: \").strip()\n","            nome_jog = input(\"Nome do jogador: \").strip()\n","            pos = input(\"Posição: \").strip()\n","            campe.adicionar_jogador(equipe, nome_jog, pos)\n","\n","        elif op == '3':\n","            eq1 = input(\"Equipe 1: \").strip()\n","            eq2 = input(\"Equipe 2: \").strip()\n","            try:\n","                g1 = int(input(f\"Pontos {eq1}: \"))\n","                g2 = int(input(f\"Pontos {eq2}: \"))\n","            except ValueError:\n","                print(\"Pontos inválidos.\")\n","                continue\n","            campe.registrar_partida(eq1, eq2, g1, g2)\n","\n","        elif op == '4':\n","            campe.mostrar_resultados()\n","\n","        elif op == '5':\n","            nome = input(\"Nome da equipe: \").strip()\n","            campe.mostrar_info_equipe(nome)\n","\n","        elif op == '6':\n","            print(\"Saindo...\")\n","            break\n","\n","        else:\n","            print(\"Opção inválida.\")\n","\n","if __name__ == \"__main__\":\n","    menu()\n"]}]}